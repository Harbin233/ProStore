from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

router = Router()

class IrinaFSM(StatesGroup):
    choosing_service = State()
    collecting_info = State()
    revising = State()
    confirming = State()

@router.message(Command("–∏—Ä–∏–Ω–∞"))
async def start_irina(message: Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç, –ò—Ä–∏–Ω–∞. –í—ã–±–µ—Ä–∏ —É—Å–ª—É–≥—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–¢–∞–ø–ë–ª–æ–≥", callback_data="irina_tapblog")],
            [InlineKeyboardButton(text="–ß–∞—Ç-–±–æ—Ç", callback_data="irina_bot")]
        ])
    )
    await state.set_state(IrinaFSM.choosing_service)

@router.callback_query(IrinaFSM.choosing_service)
async def select_service(callback: CallbackQuery, state: FSMContext):
    service = "–¢–∞–ø–ë–ª–æ–≥" if callback.data == "irina_tapblog" else "–ß–∞—Ç-–±–æ—Ç"
    await state.update_data(service=service)
    await callback.message.answer(f"‚úÖ –í—ã–±—Ä–∞–Ω–æ: {service}. –°–æ–±–µ—Ä–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ—Ç –º–µ—Ç–æ–¥–æ–ª–æ–≥–∞ –∏ –∫–ª–∏–µ–Ω—Ç–∞.")
    await state.set_state(IrinaFSM.collecting_info)

@router.message(IrinaFSM.collecting_info, F.text.lower().contains("–≥–æ—Ç–æ–≤–æ"))
async def collected_info(message: Message, state: FSMContext):
    await message.answer(
        "–ü—Ä–æ–≤–µ—Ä—å –≤—Å—ë –µ—â—ë —Ä–∞–∑. –í—Å—ë —Ç–æ—á–Ω–æ –≥–æ—Ç–æ–≤–æ?",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –î–∞, –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–ª—å—à–µ", callback_data="irina_confirm")],
            [InlineKeyboardButton(text="üîÅ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data="irina_revise")]
        ])
    )
    await state.set_state(IrinaFSM.confirming)

@router.callback_query(IrinaFSM.confirming)
async def confirm(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    service = data.get("service", "—É—Å–ª—É–≥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞")

    if callback.data == "irina_confirm":
        await callback.message.answer(f"‚úÖ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã –ø–æ —É—Å–ª—É–≥–µ {service} –ø–µ—Ä–µ–¥–∞–Ω—ã –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø.")
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–ø–∏—Å—å –≤ Notion –∏–ª–∏ –¥—Ä—É–≥–æ–π –ª–æ–≥ –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    else:
        await callback.message.answer("üîÅ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É. –ñ–¥—ë–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π.")

    await state.clear()