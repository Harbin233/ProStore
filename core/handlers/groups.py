from aiogram import Router, F, types
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
import logging

router = Router()
ANASTASIA_ID = 7553118544

logging.basicConfig(level=logging.INFO)

# –°—á—ë—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (chat_id, user_id) -> count
user_message_counter = {}

THRESHOLD = 3  # –ø–æ—Å–ª–µ —Å–∫–æ–ª—å–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –∫–Ω–æ–ø–∫—É

# "–®–∏—Ä–æ–∫–∞—è" –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∞ (—Ç–µ–∫—Å—Ç –º–æ–∂–Ω–æ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ–¥ —Å–µ–±—è)
group_inline_keyboard = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text="–ü–æ–∑–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞ üë§", callback_data="call_human_group")]
    ]
)

@router.message()
async def count_user_messages(message: types.Message, bot):
    # –°—á–∏—Ç–∞–µ–º —Ç–æ–ª—å–∫–æ —Å–æ–æ–±—â–µ–Ω–∏—è, –Ω–µ –∫–æ–º–∞–Ω–¥—ã –∏ –Ω–µ –æ—Ç –±–æ—Ç–æ–≤
    if message.from_user.is_bot or (message.text and message.text.startswith("/")):
        return

    user_id = message.from_user.id
    chat_id = message.chat.id
    key = (chat_id, user_id)
    user_message_counter[key] = user_message_counter.get(key, 0) + 1
    logging.info(f"[SUPPORT] {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª {user_message_counter[key]} —Å–æ–æ–±—â–µ–Ω–∏–π –≤ —á–∞—Ç–µ {chat_id}")

    if user_message_counter[key] == THRESHOLD:
        await bot.send_message(
            chat_id,
            f"{message.from_user.first_name}, –µ—Å–ª–∏ –Ω—É–∂–Ω–∞ –ø–æ–º–æ—â—å ‚Äî –∂–º–∏ –∫–Ω–æ–ø–∫—É üëá",
            reply_markup=group_inline_keyboard,
            reply_to_message_id=message.message_id
        )
        logging.info(f"[SUPPORT] –ü–æ–∫–∞–∑–∞–Ω–∞ –∫–Ω–æ–ø–∫–∞ –ø–æ–º–æ—â–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} ({message.from_user.username})")

@router.callback_query(F.data == "call_human_group")
async def call_human_group_callback(callback: CallbackQuery, bot):
    try:
        logging.info(f"[GROUPS] –ü–æ–ª—É—á–µ–Ω callback –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {callback.from_user.id} ({callback.from_user.username})")
        await bot.send_message(
            ANASTASIA_ID,
            f"üîî –í —á–∞—Ç–µ <b>{callback.message.chat.title or callback.message.chat.id}</b>\n"
            f"–ö–ª–∏–µ–Ω—Ç <b>{callback.from_user.full_name}</b> (@{callback.from_user.username or callback.from_user.id}) –Ω–∞–∂–∞–ª –∫–Ω–æ–ø–∫—É ¬´–ü–æ–∑–≤–∞—Ç—å —á–µ–ª–æ–≤–µ–∫–∞¬ª. –ù—É–∂–Ω–æ –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è!",
            parse_mode="HTML"
        )
        logging.info(f"[GROUPS] –ü—É—à –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –ê–Ω–∞—Å—Ç–∞—Å–∏–∏ ({ANASTASIA_ID})")
        await callback.answer("–ß–µ–ª–æ–≤–µ–∫ —É–∂–µ –Ω–∞ —Å–≤—è–∑–∏ ‚Äî —Å–∫–æ—Ä–æ –æ—Ç–≤–µ—Ç–∏—Ç –ª–∏—á–Ω–æ üë©‚Äçüíª", show_alert=True)
    except Exception as e:
        logging.error(f"[GROUPS] –û—à–∏–±–∫–∞ –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ call_human_group_callback: {e}")