from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.notion.notion_client import get_packagings_for_client, update_client_stage

router = Router()

IRA_ID = 7925207619

class AndreyFSM(StatesGroup):
    checking = State()
    comment = State()
    final = State()

# --- –ö–Ω–æ–ø–∫–∞ –ë–∞–ª–∞–Ω—Å OpenAI API ---
@router.message(F.text == "üí∞ –ë–∞–ª–∞–Ω—Å OpenAI API")
async def show_openai_balance_link(message: Message):
    await message.answer(
        "üí∞ –ü–µ—Ä–µ–π—Ç–∏ –∫ –±–∞–ª–∞–Ω—Å—É OpenAI:\n"
        "https://platform.openai.com/account/usage\n\n"
        "‚ö°Ô∏è –ó–¥–µ—Å—å –≤–∏–¥–Ω–æ –æ—Å—Ç–∞—Ç–æ–∫, –¥–∞—Ç—É –æ–ø–ª–∞—Ç—ã –∏ –∏—Å—Ç–æ—Ä–∏—é —Ä–∞—Å—Ö–æ–¥–æ–≤.",
        disable_web_page_preview=True
    )

@router.callback_query(F.data.startswith("andrey_start:"))
async def andrey_start(callback: CallbackQuery, state: FSMContext):
    _, client_id = callback.data.split(":")
    all_packs = get_packagings_for_client(client_id)

    if not all_packs:
        await callback.message.answer("‚õîÔ∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —É–ø–∞–∫–æ–≤–æ–∫ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏.")
        return

    await state.clear()
    await state.update_data(
        client_id=client_id,
        packs=all_packs,
        pack_index=0
    )

    await callback.message.answer(
        f"–í–∞–º –ø–æ—Å—Ç—É–ø–∏–ª–∏ —É–ø–∞–∫–æ–≤–∫–∏: {', '.join([p['resource_type'] for p in all_packs])}.\n\n"
        f"–ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É!",
    )
    await next_pack_step(callback.message, state)

async def next_pack_step(message: Message, state: FSMContext):
    data = await state.get_data()
    packs = data.get("packs", [])
    index = data.get("pack_index", 0)

    if index >= len(packs):
        await message.answer(
            "‚úÖ –í—Å–µ —É–ø–∞–∫–æ–≤–∫–∏ –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã!\n\n"
            "–ì–æ—Ç–æ–≤ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–ª–∏–µ–Ω—Ç–∞ –Ω–∞ —Å–ª–µ–¥—É—é—â–∏–π —ç—Ç–∞–ø?",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üìà –ö–ª–∏–µ–Ω—Ç –≤—ã–≤–µ–¥–µ–Ω –≤ –¢–û–ü", callback_data="andrey_final_top")]
                ]
            )
        )
        await state.set_state(AndreyFSM.final)
        return

    cur_pack = packs[index]
    resource = cur_pack.get("resource_type", "‚Äî")

    await message.answer(f"üîπ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–ø–∞–∫–æ–≤–∫–∏: {resource.upper()}")

    if resource == "–ö–∞–Ω–∞–ª":
        await show_channel_pack(message, cur_pack)
    elif resource == "–ë–æ—Ç":
        await show_bot_pack(message, cur_pack)
    elif resource == "ADS":
        await show_ads_pack(message, cur_pack)
    else:
        await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —É–ø–∞–∫–æ–≤–∫–∏.")

    await message.answer(
        "–í—Å—ë –≤–µ—Ä–Ω–æ?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –í—Å—ë –≤–µ—Ä–Ω–æ", callback_data="andrey_confirm_pack")],
                [InlineKeyboardButton(text="üîÑ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data="andrey_redo_pack")]
            ]
        )
    )
    await state.set_state(AndreyFSM.checking)

# --- –ü–æ–∫–∞–∑–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É –ö–ê–ù–ê–õ–ê
async def show_channel_pack(message: Message, data: dict):
    if data.get("avatar") and data["avatar"] not in ["–ù–µ—Ç —Ñ–æ—Ç–æ", "‚Äî"]:
        await message.answer_photo(data["avatar"], caption="–ê–≤–∞—Ç–∞—Ä")
    text = (
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '‚Äî')}\n"
        f"üìå –ü–æ—Å—Ç-–∑–∞–∫—Ä–µ–ø: {data.get('post', '‚Äî')}\n"
        f"üîò –ö–Ω–æ–ø–∫–∞: {data.get('button_text', '‚Äî')}\n"
        f"üîó –°—Å—ã–ª–∫–∞ –¥–ª—è –∫–Ω–æ–ø–∫–∏: {data.get('button_link', '‚Äî')}\n"
    )
    await message.answer(text)
    if data.get("post_image") and data["post_image"] not in ["–ë–µ–∑ —Ñ–æ—Ç–æ", "‚Äî"]:
        await message.answer_photo(data["post_image"], caption="–§–æ—Ç–æ –≤ –ø–æ—Å—Ç–µ")

# --- –ü–æ–∫–∞–∑–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É –ë–û–¢–ê
async def show_bot_pack(message: Message, data: dict):
    if data.get("avatar") and data["avatar"] not in ["–ù–µ—Ç —Ñ–æ—Ç–æ", "‚Äî"]:
        await message.answer_photo(data["avatar"], caption="–ê–≤–∞—Ç–∞—Ä")
    text = (
        f"üìù –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '‚Äî')}\n"
        f"üëã –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {data.get('greeting', '‚Äî')}\n"
    )
    await message.answer(text)
    if data.get("greeting_photo") and data["greeting_photo"] not in ["–ë–µ–∑ —Ñ–æ—Ç–æ", "‚Äî"]:
        await message.answer_photo(data["greeting_photo"], caption="–§–æ—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è")

# --- –ü–æ–∫–∞–∑–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É ADS
async def show_ads_pack(message: Message, data: dict):
    text = (
        f"üß† –¢–ó: {data.get('ads_recommendation', '‚Äî')}\n"
        f"üéØ –¶–ê: {data.get('ads_target', '‚Äî')}\n"
        f"üìã –ë–∞–Ω–Ω–µ—Ä: {data.get('banner_task', '‚Äî')}\n"
    )
    creatives = data.get("creatives", [])
    if creatives:
        text += "üé® –ö—Ä–µ–∞—Ç–∏–≤—ã:\n" + "\n".join([f"‚Ä¢ {c}" for c in creatives])
    await message.answer(text)

# --- –ö–Ω–æ–ø–∫–∞ "–í—Å—ë –≤–µ—Ä–Ω–æ"
@router.callback_query(AndreyFSM.checking, F.data == "andrey_confirm_pack")
async def confirm_pack(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    index = data.get("pack_index", 0)
    packs = data.get("packs", [])
    resource = packs[index]["resource_type"]
    await callback.message.answer(f"‚úÖ {resource} ‚Äî –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω.")
    await state.update_data(pack_index=index + 1)
    await next_pack_step(callback.message, state)

# --- –ö–Ω–æ–ø–∫–∞ "–ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É"
@router.callback_query(AndreyFSM.checking, F.data == "andrey_redo_pack")
async def redo_pack(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –ò—Ä–∏–Ω–µ:")
    await state.set_state(AndreyFSM.comment)

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –∏ –≤–æ–∑–≤—Ä–∞—Ç
@router.message(AndreyFSM.comment)
async def comment_redo(message: Message, state: FSMContext):
    data = await state.get_data()
    index = data.get("pack_index", 0)
    packs = data.get("packs", [])
    client_id = data.get("client_id")
    resource = packs[index]["resource_type"]
    comment = message.text

    # --- —Ç–µ–ø–µ—Ä—å –ø—É—à –≤—ã–Ω–µ—Å–µ–Ω –≤ notifications.py
    from core.utils.notifications import notify_ira_pack_reject
    await notify_ira_pack_reject(client_id, resource, comment)

    update_client_stage(client_id, f"–î–æ—Ä–∞–±–æ—Ç–∫–∞: {resource}")
    await message.answer(f"–ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É ({resource}).")
    await state.clear()

# --- –§–∏–Ω–∞–ª—å–Ω–æ–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –¢–û–ü–∞
@router.callback_query(AndreyFSM.final, F.data == "andrey_final_top")
async def andrey_final_top(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    client_id = data.get("client_id")
    update_client_stage(client_id, "–í—ã–≤–µ–¥–µ–Ω –≤ –¢–û–ü")
    await callback.message.answer("üîù –°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: –í–´–í–ï–î–ï–ù –í –¢–û–ü.")
    await state.clear()