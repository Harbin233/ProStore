from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.utils.push import push_message
from core.notion.notion_client import get_packaging_data, update_client_stage

router = Router()

IRA_ID = 7925207619
ANDREY_ID = 8151289930

class TopFSM(StatesGroup):
    checking_card = State()
    confirming_top = State()

@router.callback_query(F.data.startswith("andrey_start:"))
async def andrey_start(callback: CallbackQuery, state: FSMContext):
    _, client_id = callback.data.split(":")
    await state.update_data(client_id=client_id)

    data = get_packaging_data(client_id)
    if not data:
        await callback.message.answer("‚õîÔ∏è –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å —É–ø–∞–∫–æ–≤–∫—É –∏–∑ Notion.")
        return

    await state.update_data(resource=data.get("resource_type", "‚Äî"))
    resource = data.get("resource_type", "‚Äî")

    # 1. –ê–≤–∞—Ç–∞—Ä
    avatar = data.get("avatar")
    if avatar and avatar not in ["‚Äî", "–ù–µ—Ç —Ñ–æ—Ç–æ", "–ë–µ–∑ —Ñ–æ—Ç–æ"]:
        await callback.message.answer_photo(avatar, caption="üñº –ê–≤–∞—Ç–∞—Ä —Ä–µ—Å—É—Ä—Å–∞",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫", callback_data="confirm_block_avatar")]]
            )
        )
    else:
        await callback.message.answer("üñº –ê–≤–∞—Ç–∞—Ä —Ä–µ—Å—É—Ä—Å–∞: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫", callback_data="confirm_block_avatar")]]
            )
        )

    # 2. –û—Å–Ω–æ–≤–Ω–∞—è —Ç–µ–∫—Å—Ç–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    text = f"üìÑ –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ —Ä–µ—Å—É—Ä—Å—É ({resource}):\n"
    text += f"üîπ –¢–∏–ø: {resource}\n"
    text += f"üîπ –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description', '‚Äî')}\n"
    text += f"üîπ –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ: {data.get('greeting', '‚Äî')}\n"
    text += f"üîπ –ö–Ω–æ–ø–∫–∞: {data.get('button_text', '‚Äî')}\n"
    text += f"üîπ –°—Å—ã–ª–∫–∞: {data.get('button_link', '‚Äî')}"
    await callback.message.answer(text,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫", callback_data="confirm_block_info")]]
        )
    )

    # 3. –§–æ—Ç–æ –ø–æ—Å—Ç–∞ –∏–ª–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è
    label = "–§–æ—Ç–æ –ø–æ—Å—Ç–∞" if resource == "–ö–∞–Ω–∞–ª" else "–§–æ—Ç–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è"
    media = data.get("post_image") if resource == "–ö–∞–Ω–∞–ª" else data.get("greeting_photo")
    if media and media not in ["‚Äî", "–ù–µ—Ç —Ñ–æ—Ç–æ", "–ë–µ–∑ —Ñ–æ—Ç–æ"]:
        await callback.message.answer_photo(media, caption=f"üì∑ {label}",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫", callback_data="confirm_block_photo")]]
            )
        )
    else:
        await callback.message.answer(f"üì∑ {label}: –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫", callback_data="confirm_block_photo")]]
            )
        )

    # 4. ADS
    ads = "üß† ADS: \n"
    ads += f"- –¢–ó: {data.get('ads_recommendation', '‚Äî')}\n"
    ads += f"- –¶–ê: {data.get('ads_target', '‚Äî')}\n"
    ads += f"- –ë–∞–Ω–Ω–µ—Ä: {data.get('banner_task', '‚Äî')}\n"
    creatives = data.get("creatives", [])
    if creatives:
        ads += f"- –ö—Ä–µ–∞—Ç–∏–≤—ã:\n  ‚Ä¢ " + "\n  ‚Ä¢ ".join(creatives)
    else:
        ads += "- –ö—Ä–µ–∞—Ç–∏–≤—ã: ‚Äî"

    await callback.message.answer(ads,
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å —ç—Ç–æ—Ç –±–ª–æ–∫", callback_data="confirm_block_ads")]]
        )
    )

    # –ò—Ç–æ–≥–æ–≤—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    await callback.message.answer("–ü—Ä–æ–≤–µ—Ä—å –∫–∞—Ä—Ç–æ—á–∫—É. –ì–æ—Ç–æ–≤ –ø–µ—Ä–µ–¥–∞—Ç—å?",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –Ω–∞ —ç—Ç–∞–ø '–¢–û–ü'", callback_data="confirm_card")],
                              [InlineKeyboardButton(text="üîÅ –ù–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É", callback_data="revise_card")]]
        )
    )
    await state.set_state(TopFSM.checking_card)

@router.callback_query(TopFSM.checking_card)
async def handle_card(callback: CallbackQuery, state: FSMContext):
    client_id = (await state.get_data()).get("client_id")

    if callback.data == "confirm_card":
        await callback.message.answer("‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–æ. –ù–∞–∂–º–∏, –∫–æ–≥–¥–∞ –∫–ª–∏–µ–Ω—Ç –≤—ã–π–¥–µ—Ç –≤ –¢–û–ü.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[[InlineKeyboardButton(text="üìà –í—ã—à–µ–ª –≤ –¢–û–ü", callback_data="confirm_top")]]
            )
        )
        await state.set_state(TopFSM.confirming_top)
    elif callback.data == "revise_card":
        await push_message(IRA_ID, "üîÅ –ö–∞—Ä—Ç–æ—á–∫–∞ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∞ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É –æ—Ç –ê–Ω–¥—Ä–µ—è.")
        await callback.message.answer("‚õîÔ∏è –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞ –¥–æ—Ä–∞–±–æ—Ç–∫—É.")
        update_client_stage(client_id, "–£–ø–∞–∫–æ–≤–∫–∞")
        await state.clear()

@router.callback_query(TopFSM.confirming_top)
async def confirm_top(callback: CallbackQuery, state: FSMContext):
    client_id = (await state.get_data()).get("client_id")
    update_client_stage(client_id, "–í—ã–≤–µ–¥–µ–Ω –≤ –¢–û–ü")
    await callback.message.answer("üîù –°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ –æ–±–Ω–æ–≤–ª—ë–Ω: –í–´–í–ï–î–ï–ù –í –¢–û–ü.")
    await state.clear()