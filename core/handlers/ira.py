from aiogram import Router, F, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.filters import Command
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton

from core.utils.push import push_message
from core.notion.notion_client import is_packaging_done, update_client_stage, save_packaging_data

router = Router()

ANDREY_ID = 8151289930
IRA_ID = 7925207619

class MethodologistFSM(StatesGroup):
    choosing_type = State()
    avatar = State()
    description = State()              # Channel description
    post_text = State()
    button_text = State()
    button_link = State()
    post_image = State()
    bot_description = State()          # Bot description for combined flow
    greeting = State()
    greeting_photo = State()
    ads_recommendation = State()
    ads_target = State()
    ads_creatives_number = State()
    ads_creative_input = State()
    ads_banner_task = State()
    confirm_card = State()

@router.callback_query(F.data.startswith("ira_start:"))
async def start_packaging(callback: CallbackQuery, state: FSMContext):
    _, client_id, client_name = callback.data.split(":")
    if is_packaging_done(client_id):
        await callback.message.answer("‚ùóÔ∏è –ö–ª–∏–µ–Ω—Ç —É–∂–µ —É–ø–∞–∫–æ–≤–∞–Ω. –ü—Ä–æ–≤–µ—Ä—å –∫–∞—Ä—Ç–æ—á–∫—É –≤ Notion.")
        return

    await state.update_data(client_id=client_id)
    update_client_stage(client_id, "–£–ø–∞–∫–æ–≤–∫–∞")

    # –í—ã–±–æ—Ä —Ç–∏–ø–∞ —Ä–µ—Å—É—Ä—Å–∞: –∫–∞–Ω–∞–ª, –±–æ—Ç –∏–ª–∏ –æ–±–∞
    await callback.message.answer(
        f"–£–ø–∞–∫–æ–≤–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞: {client_name}\n–í—ã–±–µ—Ä–∏ —Ç–∏–ø —Ä–µ—Å—É—Ä—Å–∞:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="–ö–∞–Ω–∞–ª", callback_data="ira_channel")],
            [InlineKeyboardButton(text="–ë–æ—Ç", callback_data="ira_bot")],
            [InlineKeyboardButton(text="–ö–∞–Ω–∞–ª+–ë–æ—Ç", callback_data="ira_channel_bot")]
        ])
    )
    await state.set_state(MethodologistFSM.choosing_type)

@router.callback_query(MethodologistFSM.choosing_type)
async def resource_type_selected(callback: CallbackQuery, state: FSMContext):
    if callback.data == "ira_channel":
        choice = "–ö–∞–Ω–∞–ª"
    elif callback.data == "ira_bot":
        choice = "–ë–æ—Ç"
    else:
        choice = "–ö–∞–Ω–∞–ª+–ë–æ—Ç"
    await state.update_data(resource_type=choice)
    await callback.message.answer("–ó–∞–≥—Ä—É–∑–∏ –∞–≤–∞—Ç–∞—Ä —Ä–µ—Å—É—Ä—Å–∞.")
    await state.set_state(MethodologistFSM.avatar)

@router.message(MethodologistFSM.avatar)
async def get_avatar(message: Message, state: FSMContext):
    await state.update_data(avatar=message.photo[-1].file_id if message.photo else "–ù–µ—Ç —Ñ–æ—Ç–æ")
    data = await state.get_data()
    resource = data.get("resource_type")
    if resource in ["–ö–∞–Ω–∞–ª", "–ö–∞–Ω–∞–ª+–ë–æ—Ç"]:
        await message.answer("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤).")
    else:
        await message.answer("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤).")
    await state.set_state(MethodologistFSM.description)

@router.message(MethodologistFSM.description)
async def get_description(message: Message, state: FSMContext):
    data = await state.get_data()
    resource = data.get("resource_type")
    # Limit description length based on resource
    limit = 255 if resource == "–ö–∞–Ω–∞–ª" else 120
    if len(message.text) > limit:
        await message.answer(f"‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {len(message.text)} –∏–∑ {limit} —Å–∏–º–≤–æ–ª–æ–≤")
        return
    # Save appropriate description field
    if resource == "–ö–∞–Ω–∞–ª+–ë–æ—Ç":
        # First description is for channel
        await state.update_data(description=message.text)
    else:
        # Single resource description
        await state.update_data(description=message.text)

    # Proceed to next step for channel or bot
    if resource in ["–ö–∞–Ω–∞–ª", "–ö–∞–Ω–∞–ª+–ë–æ—Ç"]:
        await message.answer("–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞-–∑–∞–∫—Ä–µ–ø–∞ (–¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤).")
        await state.set_state(MethodologistFSM.post_text)
    else:
        await message.answer("–í–≤–µ–¥–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 512 —Å–∏–º–≤–æ–ª–æ–≤).")
        await state.set_state(MethodologistFSM.greeting)

@router.message(MethodologistFSM.post_text)
async def get_post(message: Message, state: FSMContext):
    if len(message.text) > 1024:
        await message.answer(f"‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {len(message.text)} –∏–∑ 1024 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    await state.update_data(post=message.text)
    await message.answer("–í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
    await state.set_state(MethodologistFSM.button_text)

@router.message(MethodologistFSM.button_text)
async def get_button_text(message: Message, state: FSMContext):
    await state.update_data(button_text=message.text)
    await message.answer("–í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
    await state.set_state(MethodologistFSM.button_link)

@router.message(MethodologistFSM.button_link)
async def get_button_link(message: Message, state: FSMContext):
    await state.update_data(button_link=message.text)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
    await state.set_state(MethodologistFSM.post_image)

@router.message(MethodologistFSM.post_image)
async def get_image(message: Message, state: FSMContext):
    image_id = message.photo[-1].file_id if message.photo else "–ë–µ–∑ —Ñ–æ—Ç–æ"
    await state.update_data(post_image=image_id)
    data = await state.get_data()
    if data.get("resource_type") == "–ö–∞–Ω–∞–ª+–ë–æ—Ç":
        # After channel flow, ask for bot description
        await message.answer("–í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤).")
        await state.set_state(MethodologistFSM.bot_description)
    else:
        # Proceed to ADS or greeting for single resource
        if data.get("resource_type") == "–ö–∞–Ω–∞–ª":
            await message.answer(
                "–ï—Å—Ç—å –ª–∏ —É—Å–ª—É–≥–∞ ADS —É –∫–ª–∏–µ–Ω—Ç–∞:",
                reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                    [InlineKeyboardButton(text="‚úÖ –ï—Å—Ç—å", callback_data="ads_yes")],
                    [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="ads_no")]
                ])
            )
            await state.set_state(MethodologistFSM.ads_recommendation)
        else:
            await message.answer("–í–≤–µ–¥–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 512 —Å–∏–º–≤–æ–ª–æ–≤).")
            await state.set_state(MethodologistFSM.greeting)

@router.message(MethodologistFSM.bot_description)
async def get_bot_description(message: Message, state: FSMContext):
    if len(message.text) > 120:
        await message.answer(f"‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {len(message.text)} –∏–∑ 120 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    await state.update_data(bot_description=message.text)
    # Now start bot flow
    await message.answer("–í–≤–µ–¥–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 512 —Å–∏–º–≤–æ–ª–æ–≤).")
    await state.set_state(MethodologistFSM.greeting)

@router.message(MethodologistFSM.greeting)
async def get_greeting(message: Message, state: FSMContext):
    if len(message.text) > 512:
        await message.answer(f"‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {len(message.text)} –∏–∑ 512 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    await state.update_data(greeting=message.text)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
    await state.set_state(MethodologistFSM.greeting_photo)

@router.message(MethodologistFSM.greeting_photo)
async def get_greeting_photo(message: Message, state: FSMContext):
    image_id = message.photo[-1].file_id if message.photo else "–ë–µ–∑ —Ñ–æ—Ç–æ"
    await state.update_data(greeting_photo=image_id)
    data = await state.get_data()
    # Decide next step based on resource or combined
    if data.get("resource_type") in ["–ö–∞–Ω–∞–ª", "–ö–∞–Ω–∞–ª+–ë–æ—Ç"]:
        await message.answer(
            "–ï—Å—Ç—å –ª–∏ —É—Å–ª—É–≥–∞ ADS —É –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ï—Å—Ç—å", callback_data="ads_yes")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="ads_no")]
            ])
        )
        await state.set_state(MethodologistFSM.ads_recommendation)
    else:
        # Bot only without post flows
        await message.answer(
            "–ï—Å—Ç—å –ª–∏ —É—Å–ª—É–≥–∞ ADS —É –∫–ª–∏–µ–Ω—Ç–∞:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="‚úÖ –ï—Å—Ç—å", callback_data="ads_yes")],
                [InlineKeyboardButton(text="‚ùå –ù–µ—Ç", callback_data="ads_no")]
            ])
        )
        await state.set_state(MethodologistFSM.ads_recommendation)

@router.callback_query(MethodologistFSM.ads_recommendation)
async def ask_ads(callback: CallbackQuery, state: FSMContext):
    if callback.data == "ads_yes":
        await callback.message.answer("–û–ø–∏—à–∏, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å —Å —Ä–µ—Å—É—Ä—Å–æ–º –¥–ª—è —É—Å–ø–µ—à–Ω–æ–π –º–æ–¥–µ—Ä–∞—Ü–∏–∏.")
        await state.set_state(MethodologistFSM.ads_recommendation)
    else:
        await callback.message.answer(
            "–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–µ—Ö—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É:",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                [InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="send_card")]
            ])
        )
        await state.set_state(MethodologistFSM.confirm_card)

@router.message(MethodologistFSM.ads_recommendation)
async def get_ads_recommendation(message: Message, state: FSMContext):
    await state.update_data(ads_recommendation=message.text)
    await message.answer("–û–ø–∏—à–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç–∞.")
    await state.set_state(MethodologistFSM.ads_target)

@router.message(MethodologistFSM.ads_target)
async def get_ads_target(message: Message, state: FSMContext):
    await state.update_data(ads_target=message.text)
    await message.answer("–°–∫–æ–ª—å–∫–æ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –±—É–¥–µ—Ç? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (0 ‚Äî –µ—Å–ª–∏ —ç—Ç–∞–ø –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è).")
    await state.set_state(MethodologistFSM.ads_creatives_number)

@router.message(MethodologistFSM.ads_creatives_number)
async def get_creative_number(message: Message, state: FSMContext):
    try:
        number = int(message.text)
        if number < 0:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ).")
        return
    await state.update_data(creative_total=number, creative_index=1, creatives=[])
    if number == 0:
        await message.answer("–≠—Ç–∞–ø –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –¢–ó –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        await state.set_state(MethodologistFSM.ads_banner_task)
    else:
        await message.answer(f"–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–∞ 1 –∏–∑ {number} (–¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤):")
        await state.set_state(MethodologistFSM.ads_creative_input)

@router.message(MethodologistFSM.ads_creative_input)
async def get_creative_text(message: Message, state: FSMContext):
    data = await state.get_data()
    creatives = data.get("creatives", [])
    index = data.get("creative_index", 1)
    total = data.get("creative_total", 0)
    if len(message.text) > 160:
        await message.answer(f"‚ùó –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {len(message.text)} –∏–∑ 160 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    creatives.append(message.text)
    await state.update_data(creatives=creatives)
    if index >= total:
        await message.answer("–¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –¢–ó –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        await state.set_state(MethodologistFSM.ads_banner_task)
    else:
        await state.update_data(creative_index=index + 1)
        await message.answer(f"–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–∞ {index + 1} –∏–∑ {total} (–¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤):")

@router.message(MethodologistFSM.ads_banner_task)
async def get_ads_banner(message: Message, state: FSMContext):
    await state.update_data(banner_task=message.text)
    await message.answer("–ù–∞–∂–º–∏, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É —Ç–µ—Ö—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É:",
        reply_markup=InlineKeyboardMarkup(inline_keyboard=[
            [InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –∫–∞—Ä—Ç–æ—á–∫—É", callback_data="send_card")]
        ])
    )
    await state.set_state(MethodologistFSM.confirm_card)

@router.callback_query(MethodologistFSM.confirm_card)
async def confirm_card(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    await callback.message.answer("‚úÖ –ö–∞—Ä—Ç–æ—á–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Ç–µ—Ö—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.")
    client_id = data.get("client_id")
    if client_id:
        resource = data.get("resource_type")
        # –†–∞–∑–¥–µ–ª—è–µ–º —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è –∫–∞–Ω–∞–ª–∞ –∏ –±–æ—Ç–∞
        if resource == "–ö–∞–Ω–∞–ª+–ë–æ—Ç":
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–Ω–∞–ª–∞
            channel_data = {
                "avatar": data.get("avatar"),
                "description": data.get("description"),
                "post": data.get("post"),
                "button_text": data.get("button_text"),
                "button_link": data.get("button_link"),
                "post_image": data.get("post_image"),
                "resource_type": "–ö–∞–Ω–∞–ª"
            }
            update_client_stage(client_id, "–£–ø–∞–∫–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            await save_packaging_data(client_id, channel_data)
            # –î–∞–Ω–Ω—ã–µ –¥–ª—è –±–æ—Ç–∞
            bot_data = {
                "avatar": data.get("avatar"),
                "description": data.get("bot_description"),
                "greeting": data.get("greeting"),
                "greeting_photo": data.get("greeting_photo"),
                "ads_recommendation": data.get("ads_recommendation"),
                "ads_target": data.get("ads_target"),
                "creatives": data.get("creatives"),
                "banner_task": data.get("banner_task"),
                "resource_type": "–ë–æ—Ç"
            }
            update_client_stage(client_id, "–£–ø–∞–∫–æ–≤–∫–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            await save_packaging_data(client_id, bot_data)
        else:
            # –û–¥–Ω–∞ —É–ø–∞–∫–æ–≤–∫–∞
            update_client_stage(client_id, "–£–ø–∞–∫–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            # –î–ª—è –æ–¥–Ω–æ—Ç–∏–ø–Ω–æ–≥–æ —Ä–µ—Å—É—Ä—Å–∞ –æ–ø–∏—Å–∞–Ω–∏–µ —É–∂–µ –≤ data['description']
            package_data = {
                **data,
                "resource_type": resource
            }
            await save_packaging_data(client_id, package_data)
        # –£–≤–µ–¥–æ–º–ª—è–µ–º —Ç–µ—Ö—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–∞
        markup = InlineKeyboardMarkup(
            inline_keyboard=[[InlineKeyboardButton(text="üîß –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ç–µ—Ö.—ç—Ç–∞–ø—É", callback_data=f"andrey_start:{client_id}")]]
        )
        await push_message(ANDREY_ID, "üì¶ –ï—Å—Ç—å —É–ø–∞–∫–æ–≤–∫–∞ –¥–ª—è —Ç–µ—Ö.—ç—Ç–∞–ø–∞", markup)
        await callback.bot.send_message(ANDREY_ID, "üì§ –ü—Ä–æ–≤–µ—Ä—å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —É–ø–∞–∫–æ–≤–∫—É, –µ—Å–ª–∏ –≤—Å—ë –≤–µ—Ä–Ω–æ.")
    await state.clear()

async def notify_ira_start_pack(client_id: str, client_name: str):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É", callback_data=f"ira_start:{client_id}:{client_name}")]
    ])
    await push_message(IRA_ID, f"‚úÖ –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —É–ø–∞–∫–æ–≤–∫–µ: {client_name}", markup)
