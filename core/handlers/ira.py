from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.utils.push import push_message
from core.notion.notion_client import (
    is_packaging_done,
    update_client_stage,
    save_packaging_data,
    get_client_name,
    get_client_services,   # sync!
)

router = Router()

ANDREY_ID = 8151289930
IRA_ID = 7925207619

# ==== –°–æ—Å—Ç–æ—è–Ω–∏—è ====
class IraGlobalFSM(StatesGroup):
    idle = State()
    final_confirm = State()

class IraChannelFSM(StatesGroup):
    avatar = State()
    description = State()
    post_text = State()
    button_text = State()
    button_link = State()
    post_image = State()

class IraBotFSM(StatesGroup):
    avatar = State()
    description = State()
    greeting = State()
    greeting_photo = State()

class IraAdsFSM(StatesGroup):
    ads_recommendation = State()
    ads_target = State()
    ads_creatives_number = State()
    ads_creative_input = State()
    ads_banner_task = State()

# ==== –ì–ª–∞–≤–Ω–∞—è —Ç–æ—á–∫–∞ –≤—Ö–æ–¥–∞ ====
@router.callback_query(F.data.startswith("ira_start:"))
async def start_packaging(callback: CallbackQuery, state: FSMContext):
    _, client_id = callback.data.split(":")
    if is_packaging_done(client_id):
        await callback.message.answer("‚ùóÔ∏è –ö–ª–∏–µ–Ω—Ç —É–∂–µ —É–ø–∞–∫–æ–≤–∞–Ω.")
        return

    await state.clear()
    await state.update_data(client_id=client_id)
    update_client_stage(client_id, "–£–ø–∞–∫–æ–≤–∫–∞")
    client_name = get_client_name(client_id)

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ —É—Å–ª—É–≥ –∏–∑ Notion
    client_services = get_client_services(client_id)
    queue = []
    if "–í—ã–≤–æ–¥ –≤ –¢–û–ü" in client_services:
        queue += ["–ö–∞–Ω–∞–ª", "–ë–æ—Ç"]
    if "ADS" in client_services:
        queue.append("ADS")
    queue = list(dict.fromkeys(queue))

    if not queue:
        await callback.message.answer("–ù–µ—Ç –∑–∞–¥–∞—á –¥–ª—è —É–ø–∞–∫–æ–≤–∫–∏!")
        return

    await state.update_data(pack_queue=queue, pack_index=0)
    await callback.message.answer(
        f"–ö–ª–∏–µ–Ω—Ç –∑–∞–∫–∞–∑–∞–ª —É—Å–ª—É–≥–∏: {', '.join(client_services)}\n\n"
        f"–ù–∞—á–∏–Ω–∞–µ–º —É–ø–∞–∫–æ–≤–∫—É: {queue[0]}."
    )
    await start_next_packaging(callback.message, state)

# ==== –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —ç—Ç–∞–ø—É ====
async def start_next_packaging(message: Message, state: FSMContext):
    data = await state.get_data()
    queue = data.get("pack_queue", [])
    index = data.get("pack_index", 0)

    if index >= len(queue):
        # –í—Å—ë –∑–∞–≤–µ—Ä—à–µ–Ω–æ ‚Äî –ø–æ–∫–∞–∑–∞—Ç—å —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∫–Ω–æ–ø–∫—É
        await message.answer(
            "‚úÖ –í—Å–µ —ç—Ç–∞–ø—ã —É–ø–∞–∫–æ–≤–∫–∏ –∑–∞–≤–µ—Ä—à–µ–Ω—ã!\n\n"
            "–ü—Ä–æ–≤–µ—Ä—å –≤—Å–µ –≤–≤–µ–¥—ë–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ. –ö–æ–≥–¥–∞ –≤—Å—ë –≥–æ—Ç–æ–≤–æ ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —Ç–µ—Ö—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É.",
            reply_markup=InlineKeyboardMarkup(
                inline_keyboard=[
                    [InlineKeyboardButton(text="üì§ –ü–µ—Ä–µ–¥–∞—Ç—å –≤—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏", callback_data="send_all_cards")]
                ]
            )
        )
        await state.set_state(IraGlobalFSM.final_confirm)
        return

    current = queue[index]
    if current == "–ö–∞–Ω–∞–ª":
        await message.answer(
            "–£–ø–∞–∫–æ–≤–∫–∞ –ö–ê–ù–ê–õ–ê:\n\n"
            "1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ –∞–≤–∞—Ç–∞—Ä –∫–∞–Ω–∞–ª–∞ (—Ñ–æ—Ç–æ). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
        )
        await state.set_state(IraChannelFSM.avatar)
    elif current == "–ë–æ—Ç":
        await message.answer(
            "–£–ø–∞–∫–æ–≤–∫–∞ –ë–û–¢–ê:\n\n"
            "1Ô∏è‚É£ –°–Ω–∞—á–∞–ª–∞ –∑–∞–≥—Ä—É–∑–∏ –∞–≤–∞—Ç–∞—Ä –±–æ—Ç–∞ (—Ñ–æ—Ç–æ). –ï—Å–ª–∏ –Ω–µ—Ç ‚Äî –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'."
        )
        await state.set_state(IraBotFSM.avatar)
    elif current == "ADS":
        await message.answer(
            "–£–ø–∞–∫–æ–≤–∫–∞ ADS:\n\n"
            "1Ô∏è‚É£ –û–ø–∏—à–∏ –¢–ó –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä: —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –∫ —Ä–µ—Å—É—Ä—Å—É,—Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)."
        )
        await state.set_state(IraAdsFSM.ads_recommendation)

# ==== FSM –¥–ª—è –ö–∞–Ω–∞–ª–∞ ====
@router.message(IraChannelFSM.avatar)
async def channel_avatar(message: Message, state: FSMContext):
    await state.update_data(channel_avatar=message.photo[-1].file_id if message.photo else "–ù–µ—Ç —Ñ–æ—Ç–æ")
    await message.answer("2Ô∏è‚É£ –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –∫–∞–Ω–∞–ª–∞ (–¥–æ 255 —Å–∏–º–≤–æ–ª–æ–≤).")
    await state.set_state(IraChannelFSM.description)

@router.message(IraChannelFSM.description)
async def channel_description(message: Message, state: FSMContext):
    if len(message.text) > 255:
        await message.answer(f"‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {len(message.text)} –∏–∑ 255 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    await state.update_data(channel_description=message.text)
    await message.answer("3Ô∏è‚É£ –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞-–∑–∞–∫—Ä–µ–ø–∞ (–¥–æ 1024 —Å–∏–º–≤–æ–ª–æ–≤).")
    await state.set_state(IraChannelFSM.post_text)

@router.message(IraChannelFSM.post_text)
async def channel_post_text(message: Message, state: FSMContext):
    if len(message.text) > 1024:
        await message.answer(f"‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {len(message.text)} –∏–∑ 1024 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    await state.update_data(channel_post_text=message.text)
    await message.answer("4Ô∏è‚É£ –í–≤–µ–¥–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
    await state.set_state(IraChannelFSM.button_text)

@router.message(IraChannelFSM.button_text)
async def channel_button_text(message: Message, state: FSMContext):
    await state.update_data(channel_button_text=message.text)
    await message.answer("5Ô∏è‚É£ –í–≤–µ–¥–∏ —Å—Å—ã–ª–∫—É –¥–ª—è –∫–Ω–æ–ø–∫–∏ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
    await state.set_state(IraChannelFSM.button_link)

@router.message(IraChannelFSM.button_link)
async def channel_button_link(message: Message, state: FSMContext):
    await state.update_data(channel_button_link=message.text)
    await message.answer("6Ô∏è‚É£ –ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø–æ—Å—Ç–∞ –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
    await state.set_state(IraChannelFSM.post_image)

@router.message(IraChannelFSM.post_image)
async def channel_post_image(message: Message, state: FSMContext):
    image_id = message.photo[-1].file_id if message.photo else "–ë–µ–∑ —Ñ–æ—Ç–æ"
    await state.update_data(channel_post_image=image_id)
    # –í—Å—ë –¥–ª—è –∫–∞–Ω–∞–ª–∞ —Å–æ–±—Ä–∞–Ω–æ, –¥–≤–∏–≥–∞–µ–º—Å—è –¥–∞–ª—å—à–µ
    data = await state.get_data()
    await state.update_data(pack_index=data.get("pack_index", 0) + 1)
    await start_next_packaging(message, state)

# ==== FSM –¥–ª—è –ë–æ—Ç–∞ ====
@router.message(IraBotFSM.avatar)
async def bot_avatar(message: Message, state: FSMContext):
    await state.update_data(bot_avatar=message.photo[-1].file_id if message.photo else "–ù–µ—Ç —Ñ–æ—Ç–æ")
    await message.answer("2Ô∏è‚É£ –í–≤–µ–¥–∏ –æ–ø–∏—Å–∞–Ω–∏–µ –±–æ—Ç–∞ (–¥–æ 120 —Å–∏–º–≤–æ–ª–æ–≤).")
    await state.set_state(IraBotFSM.description)

@router.message(IraBotFSM.description)
async def bot_description(message: Message, state: FSMContext):
    if len(message.text) > 120:
        await message.answer(f"‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {len(message.text)} –∏–∑ 120 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    await state.update_data(bot_description=message.text)
    await message.answer("3Ô∏è‚É£ –í–≤–µ–¥–∏ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–¥–æ 512 —Å–∏–º–≤–æ–ª–æ–≤).")
    await state.set_state(IraBotFSM.greeting)

@router.message(IraBotFSM.greeting)
async def bot_greeting(message: Message, state: FSMContext):
    if len(message.text) > 512:
        await message.answer(f"‚ùóÔ∏è –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {len(message.text)} –∏–∑ 512 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    await state.update_data(bot_greeting=message.text)
    await message.answer("4Ô∏è‚É£ –ü—Ä–∏–∫—Ä–µ–ø–∏ —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏—è –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
    await state.set_state(IraBotFSM.greeting_photo)

@router.message(IraBotFSM.greeting_photo)
async def bot_greeting_photo(message: Message, state: FSMContext):
    image_id = message.photo[-1].file_id if message.photo else "–ë–µ–∑ —Ñ–æ—Ç–æ"
    await state.update_data(bot_greeting_photo=image_id)
    data = await state.get_data()
    await state.update_data(pack_index=data.get("pack_index", 0) + 1)
    await start_next_packaging(message, state)

# ==== FSM –¥–ª—è ADS ====
@router.message(IraAdsFSM.ads_recommendation)
async def ads_recommendation(message: Message, state: FSMContext):
    await state.update_data(ads_recommendation=message.text)
    await message.answer("2Ô∏è‚É£ –û–ø–∏—à–∏ —Ü–µ–ª–µ–≤—É—é –∞—É–¥–∏—Ç–æ—Ä–∏—é –∫–ª–∏–µ–Ω—Ç–∞.")
    await state.set_state(IraAdsFSM.ads_target)

@router.message(IraAdsFSM.ads_target)
async def ads_target(message: Message, state: FSMContext):
    await state.update_data(ads_target=message.text)
    await message.answer("3Ô∏è‚É£ –°–∫–æ–ª—å–∫–æ –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –±—É–¥–µ—Ç? –í–≤–µ–¥–∏ —á–∏—Å–ª–æ (0 ‚Äî –µ—Å–ª–∏ —ç—Ç–∞–ø –ø—Ä–æ–ø—É—Å–∫–∞–µ—Ç—Å—è).")
    await state.set_state(IraAdsFSM.ads_creatives_number)

@router.message(IraAdsFSM.ads_creatives_number)
async def ads_creatives_number(message: Message, state: FSMContext):
    try:
        number = int(message.text)
        if number < 0:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ (0 –∏–ª–∏ –±–æ–ª—å—à–µ).")
        return
    await state.update_data(ads_creative_total=number, ads_creative_index=1, ads_creatives=[])
    if number == 0:
        await message.answer("4Ô∏è‚É£ –≠—Ç–∞–ø –∫—Ä–µ–∞—Ç–∏–≤–æ–≤ –ø—Ä–æ–ø—É—â–µ–Ω. –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –¢–ó –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        await state.set_state(IraAdsFSM.ads_banner_task)
    else:
        await message.answer(f"4Ô∏è‚É£ –í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–∞ 1 –∏–∑ {number} (–¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤):")
        await state.set_state(IraAdsFSM.ads_creative_input)

@router.message(IraAdsFSM.ads_creative_input)
async def ads_creative_input(message: Message, state: FSMContext):
    data = await state.get_data()
    creatives = data.get("ads_creatives", [])
    index = data.get("ads_creative_index", 1)
    total = data.get("ads_creative_total", 0)
    if len(message.text) > 160:
        await message.answer(f"‚ùó –ü—Ä–µ–≤—ã—à–µ–Ω–æ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: {len(message.text)} –∏–∑ 160 —Å–∏–º–≤–æ–ª–æ–≤")
        return
    creatives.append(message.text)
    await state.update_data(ads_creatives=creatives)
    if index >= total:
        await message.answer("5Ô∏è‚É£ –¢–µ–ø–µ—Ä—å –Ω–∞–ø–∏—à–∏ –¢–ó –∏ —Ç–µ–∫—Å—Ç –¥–ª—è –±–∞–Ω–Ω–µ—Ä–∞, –µ—Å–ª–∏ –Ω—É–∂–µ–Ω, –∏–ª–∏ –Ω–∞–ø–∏—à–∏ '–ü—Ä–æ–ø—É—Å—Ç–∏—Ç—å'.")
        await state.set_state(IraAdsFSM.ads_banner_task)
    else:
        await state.update_data(ads_creative_index=index + 1)
        await message.answer(f"–í–≤–µ–¥–∏ —Ç–µ–∫—Å—Ç –∫—Ä–µ–∞—Ç–∏–≤–∞ {index + 1} –∏–∑ {total} (–¥–æ 160 —Å–∏–º–≤–æ–ª–æ–≤):")

@router.message(IraAdsFSM.ads_banner_task)
async def ads_banner_task(message: Message, state: FSMContext):
    await state.update_data(ads_banner_task=message.text)
    data = await state.get_data()
    await state.update_data(pack_index=data.get("pack_index", 0) + 1)
    await start_next_packaging(message, state)

# ==== –§–∏–Ω–∞–ª—å–Ω–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ –≤—Å–µ—Ö –∫–∞—Ä—Ç–æ—á–µ–∫ ====
@router.callback_query(IraGlobalFSM.final_confirm)
async def send_all_cards(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    client_id = data.get("client_id")
    queue = data.get("pack_queue", [])

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –≤ –æ—á–µ—Ä–µ–¥–∏
    if "–ö–∞–Ω–∞–ª" in queue:
        channel_data = {
            "avatar": data.get("channel_avatar"),
            "description": data.get("channel_description"),
            "post": data.get("channel_post_text"),
            "button_text": data.get("channel_button_text"),
            "button_link": data.get("channel_button_link"),
            "post_image": data.get("channel_post_image"),
            "resource_type": "–ö–∞–Ω–∞–ª"
        }
        await save_packaging_data(client_id, channel_data)
        update_client_stage(client_id, "–£–ø–∞–∫–æ–≤–∫–∞ –∫–∞–Ω–∞–ª–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    if "–ë–æ—Ç" in queue:
        bot_data = {
            "avatar": data.get("bot_avatar"),
            "description": data.get("bot_description"),
            "greeting": data.get("bot_greeting"),
            "greeting_photo": data.get("bot_greeting_photo"),
            "resource_type": "–ë–æ—Ç"
        }
        await save_packaging_data(client_id, bot_data)
        update_client_stage(client_id, "–£–ø–∞–∫–æ–≤–∫–∞ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    if "ADS" in queue:
        ads_data = {
            "ads_recommendation": data.get("ads_recommendation"),
            "ads_target": data.get("ads_target"),
            "creatives": data.get("ads_creatives"),
            "banner_task": data.get("ads_banner_task"),
            "resource_type": "ADS"
        }
        await save_packaging_data(client_id, ads_data)
        update_client_stage(client_id, "–£–ø–∞–∫–æ–≤–∫–∞ ADS –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

    await callback.message.answer("‚úÖ –í—Å–µ –∫–∞—Ä—Ç–æ—á–∫–∏ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã —Ç–µ—Ö—Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç—É!")
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîß –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —Ç–µ—Ö.—ç—Ç–∞–ø—É", callback_data=f"andrey_start:{client_id}")]
        ]
    )
    await push_message(ANDREY_ID, "üì¶ –í—Å–µ —É–ø–∞–∫–æ–≤–∫–∏ –¥–ª—è –∫–ª–∏–µ–Ω—Ç–∞ –≥–æ—Ç–æ–≤—ã!", markup)
    await state.clear()

# ==== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –ò—Ä—ã ====
async def notify_ira_start_pack(client_id: str, client_name: str):
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="–ù–∞—á–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É", callback_data=f"ira_start:{client_id}")]
    ])
    await push_message(IRA_ID, f"‚úÖ –ö–ª–∏–µ–Ω—Ç –≥–æ—Ç–æ–≤ –∫ —É–ø–∞–∫–æ–≤–∫–µ: {client_name}", markup)