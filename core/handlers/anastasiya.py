from aiogram import Router, F
from aiogram.types import (
    Message, CallbackQuery, ReplyKeyboardMarkup, KeyboardButton,
    InlineKeyboardMarkup, InlineKeyboardButton
)
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from core.notion.notion_client import update_client_stage, get_client_name
from core.notion.notion_top import (
    get_all_top_clients,
    get_top_client_card,
    add_top_payment,
    add_top_extension,
    update_top_stage,
)
from core.utils.push import push_message

router = Router()

ANASTASIA_ID = 7553118544
ANDREY_ID = 8151289930
ALEXANDR_ID = 6503850751
EGOR_ID = 7585439289
IRA_ID = 7925207619

class CuratorFSM(StatesGroup):
    main_menu = State()
    top_menu = State()
    top_view_client = State()
    top_wait_payment_select = State()
    top_wait_payment_sum = State()
    top_wait_extension_select = State()
    top_wait_extension_sum = State()
    top_wait_status_select = State()
    top_wait_status_final = State()

def main_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–í—ã–≤–æ–¥ –≤ –¢–û–ü")],
            [KeyboardButton(text="–ú–æ–∏ –∑–∞–¥–∞—á–∏")],
            [KeyboardButton(text="–í—ã–π—Ç–∏")],
        ],
        resize_keyboard=True
    )

def top_menu_keyboard():
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–ö–ª–∏–µ–Ω—Ç—ã –¢–û–ü"), KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É –¢–û–ü")],
            [KeyboardButton(text="–ü—Ä–æ–¥–ª–∏—Ç—å –¢–û–ü"), KeyboardButton(text="–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¢–û–ü")],
            [KeyboardButton(text="–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")]
        ],
        resize_keyboard=True
    )

# --- –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é ---
@router.message(F.text.in_({"/start", "–°—Ç–∞—Ä—Ç"}))
async def anastasia_start(message: Message, state: FSMContext):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    await state.set_state(CuratorFSM.main_menu)

@router.message(CuratorFSM.main_menu, F.text == "–í—ã–≤–æ–¥ –≤ –¢–û–ü")
async def top_entry(message: Message, state: FSMContext):
    await message.answer("–ú–µ–Ω—é –¢–û–ü:", reply_markup=top_menu_keyboard())
    await state.set_state(CuratorFSM.top_menu)

@router.message(CuratorFSM.main_menu, F.text == "–ú–æ–∏ –∑–∞–¥–∞—á–∏")
async def my_tasks(message: Message, state: FSMContext):
    await message.answer("üìù –†–∞–∑–¥–µ–ª –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ.", reply_markup=main_menu_keyboard())

@router.message(CuratorFSM.main_menu, F.text == "–í—ã–π—Ç–∏")
async def exit_handler(message: Message, state: FSMContext):
    await message.answer("–í—ã –≤—ã—à–ª–∏ –∏–∑ –º–µ–Ω—é. –î–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ ‚Äî /start", reply_markup=ReplyKeyboardMarkup(keyboard=[[]], resize_keyboard=True))
    await state.clear()

# --- –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é ---
@router.message(CuratorFSM.top_menu, F.text == "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
@router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def back_to_main(message: Message, state: FSMContext):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    await state.set_state(CuratorFSM.main_menu)

# --- –ö–õ–ò–ï–ù–¢–´ –¢–û–ü (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏) ---
@router.message(CuratorFSM.top_menu, F.text == "–ö–ª–∏–µ–Ω—Ç—ã –¢–û–ü")
async def top_show_clients(message: Message, state: FSMContext):
    clients = get_all_top_clients()
    if not clients:
        await message.answer("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –≤ —Ä–∞–±–æ—Ç–µ –ø–æ –¢–û–ü.", reply_markup=top_menu_keyboard())
        return
    buttons = [
        [InlineKeyboardButton(
            text=f"{c['name']} | {c['status']}",
            callback_data=f"topclient_{c['id']}"
        )] for c in clients
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞:", reply_markup=markup)
    await state.set_state(CuratorFSM.top_view_client)

@router.callback_query(CuratorFSM.top_view_client, F.data.startswith("topclient_"))
async def top_view_one_client(callback: CallbackQuery, state: FSMContext):
    client_id = callback.data.split("_", 1)[1]
    card = get_top_client_card(client_id)
    text = f"–ö–∞—Ä—Ç–æ—á–∫–∞ –∫–ª–∏–µ–Ω—Ç–∞ {card['name']}:\n"
    text += f"–°—Ç–∞—Ç—É—Å: {card['status']}\n"
    text += f"–û—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π: {card.get('manager', '‚Äî')}\n"
    text += f"–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {card['date']}\n"
    text += f"–£—Å–ª—É–≥–∏: {card['services']}\n"
    text += f"–ë—é–¥–∂–µ—Ç: {card.get('budget', '‚Äî')}\n"
    text += f"–ü—Ä–æ–¥–ª–µ–Ω–∏—è: {card.get('extensions', 0)}\n"
    text += f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π: {card.get('comment', '')}\n"
    await callback.message.answer(text, reply_markup=top_menu_keyboard())
    await state.set_state(CuratorFSM.top_menu)
    await callback.answer()

# --- –î–û–ë–ê–í–ò–¢–¨ –û–ü–õ–ê–¢–£ –¢–û–ü (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏) ---
@router.message(CuratorFSM.top_menu, F.text == "–î–æ–±–∞–≤–∏—Ç—å –æ–ø–ª–∞—Ç—É –¢–û–ü")
async def top_wait_payment_select(message: Message, state: FSMContext):
    clients = get_all_top_clients()
    if not clients:
        await message.answer("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –æ–ø–ª–∞—Ç—ã.", reply_markup=top_menu_keyboard())
        return
    buttons = [
        [InlineKeyboardButton(
            text=f"{c['name']} | {c['status']}",
            callback_data=f"payclient_{c['id']}"
        )] for c in clients
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –æ–ø–ª–∞—Ç—ã:", reply_markup=markup)
    await state.set_state(CuratorFSM.top_wait_payment_select)

@router.callback_query(CuratorFSM.top_wait_payment_select, F.data.startswith("payclient_"))
async def top_payment_amount(callback: CallbackQuery, state: FSMContext):
    client_id = callback.data.split("_", 1)[1]
    await state.update_data(top_pay_client=client_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –æ–ø–ª–∞—Ç—ã (—á–∏—Å–ª–æ):", reply_markup=top_menu_keyboard())
    await state.set_state(CuratorFSM.top_wait_payment_sum)
    await callback.answer()

@router.message(CuratorFSM.top_wait_payment_sum)
async def top_payment_sum_final(message: Message, state: FSMContext):
    data = await state.get_data()
    client_id = data.get("top_pay_client")
    try:
        amount = float(message.text.replace(",", "."))
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=top_menu_keyboard())
        return
    add_top_payment(client_id, amount)
    name = get_client_name(client_id)
    await message.answer(f"–û–ø–ª–∞—Ç–∞ {amount}‚ÇΩ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –∫–ª–∏–µ–Ω—Ç—É {name}.", reply_markup=top_menu_keyboard())
    await state.set_state(CuratorFSM.top_menu)

# --- –ü–†–û–î–õ–ò–¢–¨ –¢–û–ü (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏) ---
@router.message(CuratorFSM.top_menu, F.text == "–ü—Ä–æ–¥–ª–∏—Ç—å –¢–û–ü")
async def top_wait_extension_select(message: Message, state: FSMContext):
    clients = get_all_top_clients()
    if not clients:
        await message.answer("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è.", reply_markup=top_menu_keyboard())
        return
    buttons = [
        [InlineKeyboardButton(
            text=f"{c['name']} | {c['status']}",
            callback_data=f"extendclient_{c['id']}"
        )] for c in clients
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è –ø—Ä–æ–¥–ª–µ–Ω–∏—è:", reply_markup=markup)
    await state.set_state(CuratorFSM.top_wait_extension_select)

@router.callback_query(CuratorFSM.top_wait_extension_select, F.data.startswith("extendclient_"))
async def top_extension_sum(callback: CallbackQuery, state: FSMContext):
    client_id = callback.data.split("_", 1)[1]
    await state.update_data(top_extension_client=client_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –ø—Ä–æ–¥–ª–µ–Ω–∏—è (—á–∏—Å–ª–æ):", reply_markup=top_menu_keyboard())
    await state.set_state(CuratorFSM.top_wait_extension_sum)
    await callback.answer()

@router.message(CuratorFSM.top_wait_extension_sum)
async def top_extension_sum_final(message: Message, state: FSMContext):
    data = await state.get_data()
    client_id = data.get("top_extension_client")
    try:
        amount = float(message.text.replace(",", "."))
    except Exception:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ —á–∏—Å–ª–æ.", reply_markup=top_menu_keyboard())
        return
    add_top_extension(client_id, amount)
    name = get_client_name(client_id)
    await message.answer(f"–ü—Ä–æ–¥–ª–µ–Ω–∏–µ –Ω–∞ {amount}‚ÇΩ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ –∫–ª–∏–µ–Ω—Ç—É {name}.", reply_markup=top_menu_keyboard())
    await state.set_state(CuratorFSM.top_menu)

# --- –ò–ó–ú–ï–ù–ò–¢–¨ –°–¢–ê–¢–£–° –¢–û–ü (–∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–∫–∏) ---
@router.message(CuratorFSM.top_menu, F.text == "–ò–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –¢–û–ü")
async def top_wait_status_select(message: Message, state: FSMContext):
    clients = get_all_top_clients()
    if not clients:
        await message.answer("–ù–µ—Ç –∫–ª–∏–µ–Ω—Ç–æ–≤ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞.", reply_markup=top_menu_keyboard())
        return
    buttons = [
        [InlineKeyboardButton(
            text=f"{c['name']} | {c['status']}",
            callback_data=f"statusclient_{c['id']}"
        )] for c in clients
    ]
    markup = InlineKeyboardMarkup(inline_keyboard=buttons)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª–∏–µ–Ω—Ç–∞ –¥–ª—è —Å–º–µ–Ω—ã —Å—Ç–∞—Ç—É—Å–∞:", reply_markup=markup)
    await state.set_state(CuratorFSM.top_wait_status_select)

@router.callback_query(CuratorFSM.top_wait_status_select, F.data.startswith("statusclient_"))
async def top_status_final(callback: CallbackQuery, state: FSMContext):
    client_id = callback.data.split("_", 1)[1]
    await state.update_data(top_status_client=client_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å (–Ω–∞–ø—Ä–∏–º–µ—Ä: –í –¢–û–ü–µ, –ü—Ä–æ–¥–ª–µ–Ω, –ù–µ –≤ –¢–û–ü–µ):", reply_markup=top_menu_keyboard())
    await state.set_state(CuratorFSM.top_wait_status_final)
    await callback.answer()

@router.message(CuratorFSM.top_wait_status_final)
async def top_status_final_set(message: Message, state: FSMContext):
    new_status = message.text.strip()
    data = await state.get_data()
    client_id = data.get("top_status_client")
    update_top_stage(client_id, new_status)
    name = get_client_name(client_id)
    await message.answer(f"–°—Ç–∞—Ç—É—Å –∫–ª–∏–µ–Ω—Ç–∞ {name} –æ–±–Ω–æ–≤–ª—ë–Ω –Ω–∞: {new_status}.", reply_markup=top_menu_keyboard())
    await state.set_state(CuratorFSM.top_menu)

# --- –í–û–ó–í–†–ê–¢ –í –õ–Æ–ë–û–ô –ú–û–ú–ï–ù–¢ ---
@router.message(F.text == "–ù–∞–∑–∞–¥ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
async def any_back_to_main(message: Message, state: FSMContext):
    await message.answer("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard())
    await state.set_state(CuratorFSM.main_menu)

# ========== –í–∞–∂–Ω–æ ==========
# --- Callbacks –¥–ª—è –∏–Ω–≤–æ–π—Å–∞ –∏ –æ–ø–ª–∞—Ç—ã ---
@router.callback_query(F.data.startswith("invoice_done_"))
async def invoice_done(callback: CallbackQuery, state: FSMContext):
    client_id = callback.data.split("_")[-1]
    update_client_stage(client_id, "–í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á—ë—Ç", callback.from_user.id)
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="‚úÖ –°—á—ë—Ç –æ–ø–ª–∞—á–µ–Ω", callback_data=f"paid_{client_id}")]
        ]
    )
    await callback.message.answer("üí∏ –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—à—å –æ–ø–ª–∞—Ç—É ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=markup)
    await state.set_state(CuratorFSM.main_menu)

@router.callback_query(F.data.startswith("paid_"))
async def payment_received(callback: CallbackQuery, state: FSMContext):
    client_id = callback.data.split("_")[-1]
    update_client_stage(client_id, "–û–ø–ª–∞—á–µ–Ω–æ", callback.from_user.id)
    client_name = get_client_name(client_id)
    markup = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="üîò –ü—Ä–∏—Å—Ç—É–ø–∏—Ç—å –∫ —É–ø–∞–∫–æ–≤–∫–µ", callback_data=f"ira_start:{client_id}")]
        ]
    )
    await push_message(IRA_ID, f"‚úÖ –ö–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª, –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ!\n–ö–ª–∏–µ–Ω—Ç: {client_name}\n–ù–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É.", markup)
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–µ—Å–ª–∏ –Ω—É–∂–Ω–æ)
    notify_text = "üí∏ –°—á—ë—Ç –æ–ø–ª–∞—á–µ–Ω"
    for uid in [ALEXANDR_ID, ANDREY_ID, EGOR_ID]:
        await push_message(uid, notify_text)
    await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    await state.set_state(CuratorFSM.main_menu)