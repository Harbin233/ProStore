from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup

from core.notion.notion_client import (
    get_services_for_client,
    update_client_stage,
    get_client_name
)
from core.utils.push import push_message
from core.handlers.ira import notify_ira_start_pack

router = Router()

ANASTASIA_ID = 7553118544
ANDREY_ID = 8151289930
ALEXANDR_ID = 6503850751
EGOR_ID = 7585439289
IRA_ID = 7925207619

class CuratorFSM(StatesGroup):
    waiting_for_start = State()
    showing_services = State()
    waiting_invoice_confirmation = State()
    waiting_payment_confirmation = State()

@router.message(F.text == "–Ø –≥–æ—Ç–æ–≤–∞")
async def curator_start(message: Message, state: FSMContext):
    await message.answer("üîî –û–∂–∏–¥–∞–µ—Ç—Å—è –∫–ª–∏–µ–Ω—Ç. –ö–∞–∫ —Ç–æ–ª—å–∫–æ –ø–æ—è–≤–∏—Ç—Å—è –∑–∞–¥–∞—á–∞ ‚Äî —Ç—ã –ø–æ–ª—É—á–∏—à—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.")
    await state.set_state(CuratorFSM.waiting_for_start)

async def notify_curator_new_client(name: str, client_id: str):
    services = get_services_for_client(client_id)
    text = f"üßæ –ù—É–∂–Ω–æ –≤—ã—Å—Ç–∞–≤–∏—Ç—å —Å—á—ë—Ç –∫–ª–∏–µ–Ω—Ç—É {name}.\n–£—Å–ª—É–≥–∏:\n" + "\n".join(
        [f"‚Ä¢ {s['name']} ‚Äî {s['price']}‚ÇΩ" for s in services]
    )
    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="üìÑ –í—ã—Å—Ç–∞–≤–ª–µ–Ω —Å—á—ë—Ç", callback_data=f"invoice_done_{client_id}")]
    ])
    await push_message(ANASTASIA_ID, text, markup)

@router.callback_query(F.data.startswith("invoice_done_"))
async def invoice_done(callback: CallbackQuery, state: FSMContext):
    client_id = callback.data.split("_")[-1]
    await state.update_data(client_id=client_id)

    markup = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text="‚úÖ –°—á—ë—Ç –æ–ø–ª–∞—á–µ–Ω", callback_data=f"paid_{client_id}")]
    ])
    await callback.message.answer("üí∏ –ö–æ–≥–¥–∞ –ø–æ–ª—É—á–∏—à—å –æ–ø–ª–∞—Ç—É ‚Äî –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ", reply_markup=markup)
    await state.set_state(CuratorFSM.waiting_payment_confirmation)

@router.callback_query(CuratorFSM.waiting_payment_confirmation, F.data.startswith("paid_"))
async def payment_received(callback: CallbackQuery, state: FSMContext):
    client_id = callback.data.split("_")[-1]
    update_client_stage(client_id, "–û–ø–ª–∞—á–µ–Ω–æ")

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    await push_message(IRA_ID, "‚úÖ –ö–ª–∏–µ–Ω—Ç –æ–ø–ª–∞—Ç–∏–ª, –º–æ–∂–Ω–æ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ —Ä–∞–±–æ—Ç–µ")
    notify_text = "üí∏ –°—á—ë—Ç –æ–ø–ª–∞—á–µ–Ω"
    for uid in [ALEXANDR_ID, ANDREY_ID, EGOR_ID]:
        await push_message(uid, notify_text)

    # –ò—Ä–µ ‚Äî –ø—É—à —Å –∫–Ω–æ–ø–∫–æ–π "–ù–∞—á–∞—Ç—å —É–ø–∞–∫–æ–≤–∫—É"
    client_name = get_client_name(client_id)
    await notify_ira_start_pack(client_id, client_name)

    await callback.message.answer("‚úÖ –û–ø–ª–∞—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞. –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω—ã.")
    await state.clear()